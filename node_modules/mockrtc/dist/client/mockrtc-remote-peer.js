"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRTCRemotePeer = void 0;
const graphql_tag_1 = require("graphql-tag");
class MockRTCRemotePeer {
    constructor(peerId, adminClient) {
        this.peerId = peerId;
        this.adminClient = adminClient;
    }
    createOffer(options) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCOffer($peerId: ID!, $options: Raw) {
                    createOffer(peerId: $peerId, options: $options) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId, options },
            transformResponse: ({ createOffer }) => {
                const session = this.getSession(createOffer.id);
                return {
                    offer: createOffer.description,
                    session,
                    setAnswer: session.completeOffer.bind(session)
                };
            }
        });
    }
    createExternalOffer(options) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCExternalOffer($peerId: ID!, $options: Raw) {
                    createExternalOffer(peerId: $peerId, options: $options) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId, options },
            transformResponse: ({ createExternalOffer }) => {
                const session = this.getSession(createExternalOffer.id);
                return {
                    id: createExternalOffer.id,
                    offer: createExternalOffer.description,
                    session,
                    setAnswer: session.completeOffer.bind(session)
                };
            }
        });
    }
    answerOffer(offer, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.adminClient.sendQuery({
                query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCAnswer(
                    $peerId: ID!,
                    $offer: SessionDescriptionInput!,
                    $options: Raw
                ) {
                    answerOffer(peerId: $peerId, offer: $offer, options: $options) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
                variables: { peerId: this.peerId, offer, options },
                transformResponse: ({ answerOffer }) => ({
                    answer: answerOffer.description,
                    session: this.getSession(answerOffer.id)
                })
            });
        });
    }
    answerExternalOffer(offer, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.adminClient.sendQuery({
                query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCExternalAnswer(
                    $peerId: ID!,
                    $offer: SessionDescriptionInput!,
                    $options: Raw
                ) {
                    answerExternalOffer(peerId: $peerId, offer: $offer, options: $options) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
                variables: { peerId: this.peerId, offer, options },
                transformResponse: ({ answerExternalOffer }) => {
                    const session = this.getSession(answerExternalOffer.id);
                    return {
                        id: answerExternalOffer.id,
                        answer: answerExternalOffer.description,
                        session
                    };
                }
            });
        });
    }
    getSession(sessionId) {
        return new RemoteSessionApi(this.adminClient, this.peerId, sessionId);
    }
    getAllMessages() {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                query GetPeerSeenMessages($peerId: ID!) {
                    getSeenMessages(peerId: $peerId)
                }
            `,
            variables: { peerId: this.peerId },
            transformResponse: ({ getSeenMessages }) => {
                return getSeenMessages.map((message) => {
                    if (typeof message === 'string') {
                        return message;
                    }
                    else if (message.type === 'buffer') {
                        return Buffer.from(message.value, 'base64');
                    }
                    else {
                        throw new Error(`Unparseable message data: ${JSON.stringify(message)}`);
                    }
                });
            }
        });
    }
    getMessagesOnChannel(channelName) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                query GetPeerSeenMessages($peerId: ID!, $channelName: String) {
                    getSeenMessages(peerId: $peerId, channelName: $channelName)
                }
            `,
            variables: { peerId: this.peerId, channelName },
            transformResponse: ({ getSeenMessages }) => {
                return getSeenMessages.map((message) => {
                    if (typeof message === 'string') {
                        return message;
                    }
                    else if (message.type === 'buffer') {
                        return Buffer.from(message.value, 'base64');
                    }
                    else {
                        throw new Error(`Unparseable message data: ${JSON.stringify(message)}`);
                    }
                });
            }
        });
    }
}
exports.MockRTCRemotePeer = MockRTCRemotePeer;
class RemoteSessionApi {
    constructor(adminClient, peerId, sessionId) {
        this.adminClient = adminClient;
        this.peerId = peerId;
        this.sessionId = sessionId;
    }
    createOffer(options) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCSessionOffer($peerId: ID!, $sessionId: ID!, $options: Raw) {
                    createOffer(peerId: $peerId, sessionId: $sessionId, options: $options) {
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId, sessionId: this.sessionId, options },
            transformResponse: ({ createOffer }) => createOffer.description
        });
    }
    completeOffer(answer) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation CompletePeerRTCOffer(
                    $peerId: ID!,
                    $sessionId: ID!,
                    $answer: SessionDescriptionInput!
                ) {
                    completeOffer(peerId: $peerId, sessionId: $sessionId, answer: $answer)
                }
            `,
            variables: {
                peerId: this.peerId,
                sessionId: this.sessionId,
                answer: answer
            }
        });
    }
    answerOffer(offer, options) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCAnswer(
                    $peerId: ID!,
                    $sessionId: ID!,
                    $offer: SessionDescriptionInput!,
                    $options: Raw
                ) {
                    answerOffer(peerId: $peerId, sessionId: $sessionId, offer: $offer, options: $options) {
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: {
                peerId: this.peerId,
                sessionId: this.sessionId,
                offer,
                options
            },
            transformResponse: ({ answerOffer }) => answerOffer.description
        });
    }
}
//# sourceMappingURL=mockrtc-remote-peer.js.map