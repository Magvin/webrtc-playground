"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepDefinitionLookup = exports.DynamicProxyStepDefinition = exports.PeerProxyStepDefinition = exports.EchoStepDefinition = exports.CloseStepDefinition = exports.SendStepDefinition = exports.CreateChannelStepDefinition = exports.WaitForMediaStepDefinition = exports.WaitForTrackStepDefinition = exports.WaitForMessageStepDefinition = exports.WaitForChannelStepDefinition = exports.WaitForDurationStepDefinition = exports.Serializable = void 0;
const PluggableAdmin = require("mockttp/dist/pluggable-admin-api/pluggable-admin.browser");
exports.Serializable = PluggableAdmin.Serialization.Serializable;
class WaitForDurationStepDefinition extends exports.Serializable {
    constructor(durationMs) {
        super();
        this.durationMs = durationMs;
        this.type = 'wait-for-duration';
    }
    explain() {
        return `wait for ${this.durationMs}ms`;
    }
}
exports.WaitForDurationStepDefinition = WaitForDurationStepDefinition;
class WaitForChannelStepDefinition extends exports.Serializable {
    constructor(channelLabel) {
        super();
        this.channelLabel = channelLabel;
        this.type = 'wait-for-rtc-data-channel';
    }
    explain() {
        return `wait for an RTC channel${this.channelLabel ? ` labelled '${this.channelLabel}'` : ''}`;
    }
}
exports.WaitForChannelStepDefinition = WaitForChannelStepDefinition;
class WaitForMessageStepDefinition extends exports.Serializable {
    constructor(channelLabel) {
        super();
        this.channelLabel = channelLabel;
        this.type = 'wait-for-rtc-message';
    }
    explain() {
        return `wait for an RTC message${this.channelLabel ? ` on channel '${this.channelLabel}'` : ''}`;
    }
}
exports.WaitForMessageStepDefinition = WaitForMessageStepDefinition;
class WaitForTrackStepDefinition extends exports.Serializable {
    constructor() {
        super(...arguments);
        this.type = 'wait-for-rtc-track';
    }
    explain() {
        return `wait for an RTC track`;
    }
}
exports.WaitForTrackStepDefinition = WaitForTrackStepDefinition;
class WaitForMediaStepDefinition extends exports.Serializable {
    constructor() {
        super(...arguments);
        this.type = 'wait-for-rtc-media';
    }
    explain() {
        return `wait for RTC media data`;
    }
}
exports.WaitForMediaStepDefinition = WaitForMediaStepDefinition;
class CreateChannelStepDefinition extends exports.Serializable {
    constructor(channelLabel) {
        super();
        this.channelLabel = channelLabel;
        this.type = 'create-rtc-data-channel';
    }
    explain() {
        return `create an RTC data channel labelled '${this.channelLabel}'`;
    }
}
exports.CreateChannelStepDefinition = CreateChannelStepDefinition;
class SendStepDefinition extends exports.Serializable {
    constructor(channelLabel, message) {
        super();
        this.channelLabel = channelLabel;
        this.message = message;
        this.type = 'send-rtc-data-message';
    }
    explain() {
        return `send an RTC data message${this.channelLabel ? ` on channel '${this.channelLabel}'` : ''}`;
    }
}
exports.SendStepDefinition = SendStepDefinition;
class CloseStepDefinition extends exports.Serializable {
    constructor() {
        super(...arguments);
        this.type = 'close-rtc-connection';
    }
    explain() {
        return `close the RTC connection`;
    }
}
exports.CloseStepDefinition = CloseStepDefinition;
class EchoStepDefinition extends exports.Serializable {
    constructor() {
        super(...arguments);
        this.type = 'echo-rtc';
    }
    explain() {
        return `echo all RTC media & data`;
    }
}
exports.EchoStepDefinition = EchoStepDefinition;
class PeerProxyStepDefinition extends exports.Serializable {
    constructor(connectionTarget) {
        super();
        this.type = 'rtc-peer-proxy';
        if (connectionTarget instanceof Function) {
            this.getAnswer = connectionTarget;
        }
        else {
            this.getAnswer = (offer) => __awaiter(this, void 0, void 0, function* () {
                yield connectionTarget.setRemoteDescription(offer);
                const answer = yield connectionTarget.createAnswer();
                yield connectionTarget.setLocalDescription(answer);
                return answer;
            });
        }
    }
    explain() {
        return `proxy the RTC connection to the configured peer`;
    }
    serialize(channel) {
        channel.onRequest((msg) => __awaiter(this, void 0, void 0, function* () {
            return { answer: yield this.getAnswer(msg.offer) };
        }));
        return { type: this.type };
    }
}
exports.PeerProxyStepDefinition = PeerProxyStepDefinition;
class DynamicProxyStepDefinition extends exports.Serializable {
    constructor() {
        super(...arguments);
        this.type = 'rtc-dynamic-proxy';
    }
    explain() {
        return `proxy the RTC connection to a remote peer`;
    }
}
exports.DynamicProxyStepDefinition = DynamicProxyStepDefinition;
exports.StepDefinitionLookup = {
    'wait-for-duration': WaitForDurationStepDefinition,
    'wait-for-rtc-data-channel': WaitForChannelStepDefinition,
    'wait-for-rtc-track': WaitForTrackStepDefinition,
    'wait-for-rtc-media': WaitForMediaStepDefinition,
    'wait-for-rtc-message': WaitForMessageStepDefinition,
    'create-rtc-data-channel': CreateChannelStepDefinition,
    'send-rtc-data-message': SendStepDefinition,
    'close-rtc-connection': CloseStepDefinition,
    'echo-rtc': EchoStepDefinition,
    'rtc-peer-proxy': PeerProxyStepDefinition,
    'rtc-dynamic-proxy': DynamicProxyStepDefinition
};
//# sourceMappingURL=handler-step-definitions.js.map