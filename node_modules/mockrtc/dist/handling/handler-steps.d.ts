import { PluggableAdmin } from 'mockttp';
import type { MockRTCConnection } from '../webrtc/mockrtc-connection';
import { StepDefinitionLookup, CloseStepDefinition, DynamicProxyStepDefinition, EchoStepDefinition, HandlerStepDefinition, PeerProxyStepDefinition, CreateChannelStepDefinition, SendStepDefinition, WaitForChannelStepDefinition, WaitForDurationStepDefinition, WaitForMediaStepDefinition, WaitForMessageStepDefinition, WaitForTrackStepDefinition } from './handler-step-definitions';
declare type ClientServerChannel = PluggableAdmin.Serialization.ClientServerChannel;
export interface HandlerStep extends HandlerStepDefinition {
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class WaitForDurationStep extends WaitForDurationStepDefinition {
    handle(): Promise<void>;
}
export declare class WaitForChannelStep extends WaitForChannelStepDefinition {
    private matchesChannel;
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class WaitForMessageStep extends WaitForMessageStepDefinition {
    private matchesChannel;
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class WaitForTrackStep extends WaitForTrackStepDefinition {
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class WaitForMediaStep extends WaitForMediaStepDefinition {
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class CreateChannelStep extends CreateChannelStepDefinition {
    handle(conn: MockRTCConnection): Promise<void>;
}
export declare class SendStep extends SendStepDefinition {
    private matchesChannel;
    handle({ channels }: MockRTCConnection): Promise<void>;
    static deserialize(data: {
        channelLabel: string | undefined;
        message: string | {
            type: 'Buffer';
            data: number[];
        };
    }): SendStep;
}
export declare class CloseStep extends CloseStepDefinition {
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class EchoStep extends EchoStepDefinition {
    handle(connection: MockRTCConnection): Promise<void>;
}
export declare class PeerProxyStep extends PeerProxyStepDefinition {
    private externalConnections;
    handle(connection: MockRTCConnection): Promise<void>;
    serialize(channel: ClientServerChannel): {};
    static deserialize(_data: {}, channel: ClientServerChannel): PeerProxyStep;
    dispose(): void;
}
export declare class DynamicProxyStep extends DynamicProxyStepDefinition {
    private externalConnections;
    handle(connection: MockRTCConnection): Promise<void>;
    dispose(): void;
}
export declare const StepLookup: typeof StepDefinitionLookup;
export {};
