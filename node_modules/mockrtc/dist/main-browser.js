"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAdminServer = exports.getRemote = exports.getLocal = exports.hookAllWebRTC = exports.hookWebRTCConnection = exports.MOCKRTC_CONTROL_CHANNEL = exports.MockRTCAdminRequestBuilder = exports.MatcherDefinitions = exports.HandlerStepDefinitions = void 0;
const mockrtc_client_1 = require("./client/mockrtc-client");
// Export the required structures to remotely build and send rules to the admin API:
exports.HandlerStepDefinitions = require("./handling/handler-step-definitions");
exports.MatcherDefinitions = require("./matching/matcher-definitions");
var mockrtc_admin_request_builder_1 = require("./client/mockrtc-admin-request-builder");
Object.defineProperty(exports, "MockRTCAdminRequestBuilder", { enumerable: true, get: function () { return mockrtc_admin_request_builder_1.MockRTCAdminRequestBuilder; } });
var control_channel_1 = require("./webrtc/control-channel");
Object.defineProperty(exports, "MOCKRTC_CONTROL_CHANNEL", { enumerable: true, get: function () { return control_channel_1.MOCKRTC_CONTROL_CHANNEL; } });
var webrtc_hooks_1 = require("./webrtc-hooks");
Object.defineProperty(exports, "hookWebRTCConnection", { enumerable: true, get: function () { return webrtc_hooks_1.hookWebRTCConnection; } });
Object.defineProperty(exports, "hookAllWebRTC", { enumerable: true, get: function () { return webrtc_hooks_1.hookAllWebRTC; } });
function getLocal() {
    return new mockrtc_client_1.MockRTCClient();
}
exports.getLocal = getLocal;
function getRemote(options = {}) {
    return new mockrtc_client_1.MockRTCClient(options);
}
exports.getRemote = getRemote;
function getAdminServer() {
    throw new Error("Can't use MockRTC.getLocal() in a browser");
}
exports.getAdminServer = getAdminServer;
//# sourceMappingURL=main-browser.js.map