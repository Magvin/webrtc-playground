"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAdminServer = exports.getRemote = exports.getLocal = exports.hookAllWebRTC = exports.hookWebRTCConnection = exports.MOCKRTC_CONTROL_CHANNEL = exports.MockRTCAdminRequestBuilder = exports.MatcherDefinitions = exports.HandlerStepDefinitions = exports.MockRTCAdminPlugin = void 0;
const mockrtc_server_1 = require("./server/mockrtc-server");
const mockrtc_admin_server_1 = require("./server/mockrtc-admin-server");
var mockrtc_admin_plugin_1 = require("./server/mockrtc-admin-plugin");
Object.defineProperty(exports, "MockRTCAdminPlugin", { enumerable: true, get: function () { return mockrtc_admin_plugin_1.MockRTCAdminPlugin; } });
const mockrtc_client_1 = require("./client/mockrtc-client");
// Export the required structures to remotely build and send rules to the admin API:
exports.HandlerStepDefinitions = require("./handling/handler-step-definitions");
exports.MatcherDefinitions = require("./matching/matcher-definitions");
var mockrtc_admin_request_builder_1 = require("./client/mockrtc-admin-request-builder");
Object.defineProperty(exports, "MockRTCAdminRequestBuilder", { enumerable: true, get: function () { return mockrtc_admin_request_builder_1.MockRTCAdminRequestBuilder; } });
var control_channel_1 = require("./webrtc/control-channel");
Object.defineProperty(exports, "MOCKRTC_CONTROL_CHANNEL", { enumerable: true, get: function () { return control_channel_1.MOCKRTC_CONTROL_CHANNEL; } });
var webrtc_hooks_1 = require("./webrtc-hooks");
Object.defineProperty(exports, "hookWebRTCConnection", { enumerable: true, get: function () { return webrtc_hooks_1.hookWebRTCConnection; } });
Object.defineProperty(exports, "hookAllWebRTC", { enumerable: true, get: function () { return webrtc_hooks_1.hookAllWebRTC; } });
/**
 * Get a MockRTC instance on the local machine.
 *
 * In most simple environments, you can call this method directly and immediately
 * get a MockRTC instance and start mocking peers.
 *
 * In node, the mocked peers will run in process and require no further setup.
 *
 * In browsers this is an alias for {@link getRemote}. You'll need to start a MockRTC
 * admin server outside your tests before calling this, which will create and manage
 * your fake peers outside the browser.
 *
 * @category API
 */
function getLocal() {
    return new mockrtc_server_1.MockRTCServer();
}
exports.getLocal = getLocal;
/**
 * Get a MockRTC instance, managed by a MockRTC admin server running elsewhere.
 *
 * This connects to a MockRTC server, and uses that to start
 * and stop mock peers.
 *
 * @category API
 */
function getRemote(options = {}) {
    return new mockrtc_client_1.MockRTCClient(options);
}
exports.getRemote = getRemote;
/**
 * Get a MockRTC admin server, which can be used with a MockRTC remote client to create
 * & manage mock peers either from remote machines or from local environments
 * that lack necessary capabilities, e.g. to use MockRTC from inside a browser.
 *
 * This function exists so you can set up these servers programmatically, but for most
 * usage you can just run your tests via the `mockrtc` binary, which will automatically
 * start and stop an admin server for you:
 *
 * ```
 * mockrtc -c <your test command>
 * ```
 *
 * @category API
 */
function getAdminServer() {
    return new mockrtc_admin_server_1.MockRTCAdminServer();
}
exports.getAdminServer = getAdminServer;
//# sourceMappingURL=main.js.map