import * as PluggableAdmin from 'mockttp/dist/pluggable-admin-api/pluggable-admin.browser';
export declare type Serializable = PluggableAdmin.Serialization.Serializable;
export declare const Serializable: typeof PluggableAdmin.Serialization.Serializable;
export interface MatcherDefinition extends Serializable {
    readonly type: keyof typeof MatcherDefinitionLookup;
}
export declare class HasDataChannelMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly type = "has-rtc-data-channel";
    explain(): string;
}
export declare class HasVideoTrackMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly type = "has-rtc-video-track";
    explain(): string;
}
export declare class HasAudioTrackMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly type = "has-rtc-audio-track";
    explain(): string;
}
export declare class HasMediaTrackMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly type = "has-rtc-media-track";
    explain(): string;
}
export declare class HostnameMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly hostname: string;
    readonly type = "rtc-page-hostname";
    constructor(hostname: string);
    explain(): string;
}
export declare class UrlRegexMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly type = "rtc-page-regex";
    readonly regexSource: string;
    readonly regexFlags: string;
    constructor(regex: RegExp);
    explain(): string;
}
export declare class UserAgentRegexMatcherDefinition extends Serializable implements MatcherDefinition {
    readonly type = "rtc-user-agent-regex";
    readonly regexSource: string;
    readonly regexFlags: string;
    constructor(regex: RegExp);
    explain(): string;
}
export declare const MatcherDefinitionLookup: {
    'has-rtc-data-channel': typeof HasDataChannelMatcherDefinition;
    'has-rtc-video-track': typeof HasVideoTrackMatcherDefinition;
    'has-rtc-audio-track': typeof HasAudioTrackMatcherDefinition;
    'has-rtc-media-track': typeof HasMediaTrackMatcherDefinition;
    'rtc-page-hostname': typeof HostnameMatcherDefinition;
    'rtc-page-regex': typeof UrlRegexMatcherDefinition;
    'rtc-user-agent-regex': typeof UserAgentRegexMatcherDefinition;
};
