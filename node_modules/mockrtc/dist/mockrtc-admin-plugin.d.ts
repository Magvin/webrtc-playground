/// <reference types="node" />
import * as stream from 'stream';
import { PluggableAdmin } from 'mockttp';
import { SerializedValue } from 'mockttp/dist/util/serialization';
import { HandlerStep } from './handling/handler-steps';
import { MockRTCOptions } from './mockrtc';
export interface SessionData {
    id: string;
    description: RTCSessionDescriptionInit;
}
export declare class MockRTCAdminPlugin implements PluggableAdmin.AdminPlugin<MockRTCOptions, {}> {
    private mockRTCServer;
    start(options: MockRTCOptions): Promise<void>;
    reset(): void;
    stop(): Promise<void>;
    schema: import("graphql/language/ast").DocumentNode;
    buildResolvers(adminStream: stream.Duplex, ruleParams: {}): {
        Mutation: {
            createPeer: (__: any, { data: { steps } }: {
                data: {
                    steps: Array<SerializedValue<HandlerStep>>;
                };
            }) => Promise<import("./mockrtc-server-peer").MockRTCServerPeer>;
            createOffer: (__: any, { peerId, sessionId }: {
                peerId: string;
                sessionId?: string | undefined;
            }) => Promise<SessionData>;
            createExternalOffer: (__: any, { peerId }: {
                peerId: string;
            }) => Promise<SessionData>;
            completeOffer: (__: any, { peerId, sessionId, answer }: {
                peerId: string;
                sessionId: string;
                answer: RTCSessionDescriptionInit;
            }) => Promise<void>;
            answerOffer: (__: any, { peerId, sessionId, offer }: {
                peerId: string;
                sessionId?: string | undefined;
                offer: RTCSessionDescriptionInit;
            }) => Promise<SessionData>;
            answerExternalOffer: (__: any, { peerId, offer }: {
                peerId: string;
                offer: RTCSessionDescriptionInit;
            }) => Promise<SessionData>;
        };
        Query: {
            getSeenMessages: (__: any, { peerId, channelName }: {
                peerId: string;
                channelName?: string | undefined;
            }) => Promise<(string | {
                type: string;
                value: string;
            })[]>;
        };
    };
}
