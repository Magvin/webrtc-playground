"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRTCClient = void 0;
const graphql_tag_1 = require("graphql-tag");
const mockttp_1 = require("mockttp");
const serialization_1 = require("mockttp/dist/util/serialization");
const mockrtc_remote_peer_1 = require("./mockrtc-remote-peer");
const handler_builder_1 = require("./handling/handler-builder");
class MockRTCClient {
    constructor(options = {}) {
        this.options = options;
        this.buildPeerFromData = (handlerSteps) => __awaiter(this, void 0, void 0, function* () {
            const { adminStream } = this.adminClient;
            const peerData = yield this.adminClient.sendQuery({
                query: (0, graphql_tag_1.default) `
                mutation CreatePeer($peerData: RTCHandlerData!) {
                    createPeer(data: $peerData) {
                        peerId
                    }
                }
            `,
                variables: {
                    peerData: {
                        steps: handlerSteps.map(step => (0, serialization_1.serialize)(step, adminStream))
                    }
                },
                transformResponse: ({ createPeer }) => createPeer
            });
            const { peerId } = peerData;
            return new mockrtc_remote_peer_1.MockRTCRemotePeer(peerId, this.adminClient);
        });
        this.adminClient = new mockttp_1.PluggableAdmin.AdminClient(options);
    }
    buildPeer() {
        return new handler_builder_1.MockRTCHandlerBuilder(this.buildPeerFromData);
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adminClient.start({
                webrtc: this.options
            });
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adminClient.stop();
        });
    }
}
exports.MockRTCClient = MockRTCClient;
//# sourceMappingURL=mockrtc-client.js.map