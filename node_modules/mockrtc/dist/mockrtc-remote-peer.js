"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRTCRemotePeer = void 0;
const graphql_tag_1 = require("graphql-tag");
class MockRTCRemotePeer {
    constructor(peerId, adminClient) {
        this.peerId = peerId;
        this.adminClient = adminClient;
        this.completeOffer = (sessionId, answer) => __awaiter(this, void 0, void 0, function* () {
            yield this.adminClient.sendQuery({
                query: (0, graphql_tag_1.gql) `
                mutation CompletePeerRTCOffer(
                    $peerId: ID!,
                    $sessionId: ID!,
                    $answer: SessionDescriptionInput!
                ) {
                    completeOffer(peerId: $peerId, sessionId: $sessionId, answer: $answer)
                }
            `,
                variables: {
                    peerId: this.peerId,
                    sessionId,
                    answer: answer
                }
            });
            return new RemoteSessionApi(this.adminClient, this.peerId, sessionId);
        });
    }
    createOffer() {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCOffer($peerId: ID!) {
                    createOffer(peerId: $peerId) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId },
            transformResponse: ({ createOffer }) => ({
                offer: createOffer.description,
                setAnswer: (answer) => this.completeOffer(createOffer.id, answer)
            })
        });
    }
    createExternalOffer() {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCExternalOffer($peerId: ID!) {
                    createExternalOffer(peerId: $peerId) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId },
            transformResponse: ({ createExternalOffer }) => ({
                id: createExternalOffer.id,
                offer: createExternalOffer.description,
                setAnswer: (answer) => this.completeOffer(createExternalOffer.id, answer)
            })
        });
    }
    answerOffer(offer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.adminClient.sendQuery({
                query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCAnswer($peerId: ID!, $offer: SessionDescriptionInput!) {
                    answerOffer(peerId: $peerId, offer: $offer) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
                variables: { peerId: this.peerId, offer },
                transformResponse: ({ answerOffer }) => ({
                    answer: answerOffer.description,
                    session: new RemoteSessionApi(this.adminClient, this.peerId, answerOffer.id)
                })
            });
        });
    }
    answerExternalOffer(offer) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.adminClient.sendQuery({
                query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCExternalAnswer($peerId: ID!, $offer: SessionDescriptionInput!) {
                    answerExternalOffer(peerId: $peerId, offer: $offer) {
                        id
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
                variables: { peerId: this.peerId, offer },
                transformResponse: ({ answerExternalOffer }) => ({
                    id: answerExternalOffer.id,
                    answer: answerExternalOffer.description
                })
            });
        });
    }
    getAllMessages() {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                query GetPeerSeenMessages($peerId: ID!) {
                    getSeenMessages(peerId: $peerId)
                }
            `,
            variables: { peerId: this.peerId },
            transformResponse: ({ getSeenMessages }) => {
                return getSeenMessages.map((message) => {
                    if (typeof message === 'string') {
                        return message;
                    }
                    else if (message.type === 'buffer') {
                        return Buffer.from(message.value, 'base64');
                    }
                    else {
                        throw new Error(`Unparseable message data: ${JSON.stringify(message)}`);
                    }
                });
            }
        });
    }
    getMessagesOnChannel(channelName) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                query GetPeerSeenMessages($peerId: ID!, $channelName: String) {
                    getSeenMessages(peerId: $peerId, channelName: $channelName)
                }
            `,
            variables: { peerId: this.peerId, channelName },
            transformResponse: ({ getSeenMessages }) => {
                return getSeenMessages.map((message) => {
                    if (typeof message === 'string') {
                        return message;
                    }
                    else if (message.type === 'buffer') {
                        return Buffer.from(message.value, 'base64');
                    }
                    else {
                        throw new Error(`Unparseable message data: ${JSON.stringify(message)}`);
                    }
                });
            }
        });
    }
}
exports.MockRTCRemotePeer = MockRTCRemotePeer;
class RemoteSessionApi {
    constructor(adminClient, peerId, sessionId) {
        this.adminClient = adminClient;
        this.peerId = peerId;
        this.sessionId = sessionId;
    }
    createOffer() {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCSessionOffer($peerId: ID!, $sessionId: ID!) {
                    createOffer(peerId: $peerId, sessionId: $sessionId) {
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId, sessionId: this.sessionId },
            transformResponse: ({ createOffer }) => createOffer.description
        });
    }
    completeOffer(answer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.adminClient.sendQuery({
                query: (0, graphql_tag_1.gql) `
                mutation CompletePeerRTCOffer(
                    $peerId: ID!,
                    $sessionId: ID!,
                    $answer: SessionDescriptionInput!
                ) {
                    completeOffer(peerId: $peerId, sessionId: $sessionId, answer: $answer)
                }
            `,
                variables: {
                    peerId: this.peerId,
                    sessionId: this.sessionId,
                    answer: answer
                }
            });
        });
    }
    answerOffer(offer) {
        return this.adminClient.sendQuery({
            query: (0, graphql_tag_1.gql) `
                mutation GetPeerRTCAnswer($peerId: ID!, $offer: SessionDescriptionInput!) {
                    answerOffer(peerId: $peerId, offer: $offer) {
                        description {
                            type
                            sdp
                        }
                    }
                }
            `,
            variables: { peerId: this.peerId, offer },
            transformResponse: ({ answerOffer }) => answerOffer.description
        });
    }
}
//# sourceMappingURL=mockrtc-remote-peer.js.map