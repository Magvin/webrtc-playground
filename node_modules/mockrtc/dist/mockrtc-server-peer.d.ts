/// <reference types="node" />
import { MockRTCPeer, MockRTCPeerOptions, MockRTCSessionAPI, MockRTCAnswerParams, MockRTCOfferParams, MockRTCExternalAnswerParams, MockRTCExternalOfferParams } from "./mockrtc-peer";
import { HandlerStep } from './handling/handler-steps';
import { RTCConnection } from './webrtc/rtc-connection';
export declare class MockRTCServerPeer implements MockRTCPeer {
    private handlerSteps;
    private options;
    readonly peerId: string;
    private readonly connections;
    private readonly unassignedExternalConnections;
    constructor(handlerSteps: HandlerStep[], options?: MockRTCPeerOptions);
    trackConnection(conn: RTCConnection): void;
    private getExternalConnection;
    createExternalOffer(): Promise<MockRTCExternalOfferParams>;
    answerExternalOffer(offer: RTCSessionDescriptionInit): Promise<MockRTCExternalAnswerParams>;
    private createConnection;
    createOffer(): Promise<MockRTCOfferParams & {
        _sessionId: string;
    }>;
    answerOffer(offer: RTCSessionDescriptionInit): Promise<MockRTCAnswerParams & {
        _sessionId: string;
    }>;
    getSessionApi(id: string): MockRTCSessionAPI;
    private handleConnection;
    close(): Promise<void>;
    private messages;
    getAllMessages(): Promise<(string | Buffer)[]>;
    getMessagesOnChannel(channelName: string): Promise<(string | Buffer)[]>;
}
