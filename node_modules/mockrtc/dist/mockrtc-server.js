"use strict";
/*
 * SPDX-FileCopyrightText: 2022 Tim Perry <tim@httptoolkit.tech>
 * SPDX-License-Identifier: Apache-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRTCServer = void 0;
const mockrtc_server_peer_1 = require("./mockrtc-server-peer");
const handler_builder_1 = require("./handling/handler-builder");
const handler_steps_1 = require("./handling/handler-steps");
class MockRTCServer {
    constructor(options = {}) {
        this.options = options;
        this.buildPeerFromData = (handlerStepDefinitions) => __awaiter(this, void 0, void 0, function* () {
            const handlerSteps = handlerStepDefinitions.map((definition) => {
                return Object.assign(Object.create(handler_steps_1.StepLookup[definition.type].prototype), definition);
            });
            const peer = new mockrtc_server_peer_1.MockRTCServerPeer(handlerSteps, this.options);
            this._activePeers[peer.peerId] = peer;
            return peer;
        });
        this._activePeers = {};
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.activePeers.map(peer => peer.close()));
            this._activePeers = {};
        });
    }
    buildPeer() {
        return new handler_builder_1.MockRTCHandlerBuilder(this.buildPeerFromData);
    }
    get activePeers() {
        return Object.values(this._activePeers);
    }
    getPeer(id) {
        return this._activePeers[id];
    }
}
exports.MockRTCServer = MockRTCServer;
//# sourceMappingURL=mockrtc-server.js.map