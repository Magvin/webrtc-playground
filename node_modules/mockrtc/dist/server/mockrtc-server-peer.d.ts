/// <reference types="node" />
import { EventEmitter } from "events";
import { MockRTCPeer, MockRTCPeerOptions, MockRTCSession, MockRTCAnswerParams, MockRTCOfferParams, MockRTCExternalAnswerParams, MockRTCExternalOfferParams, OfferOptions, AnswerOptions } from "../mockrtc-peer";
import { HandlerStep } from '../handling/handler-steps';
import { RTCConnection } from '../webrtc/rtc-connection';
export declare class MockRTCServerPeer implements MockRTCPeer {
    private getHandlerSteps;
    private options;
    private eventEmitter;
    readonly peerId: string;
    private debug;
    private readonly connections;
    private readonly unassignedExternalConnections;
    constructor(getHandlerSteps: (conn: RTCConnection) => (HandlerStep[] | Promise<HandlerStep[]>), options: MockRTCPeerOptions & {
        peerId?: string;
    }, eventEmitter: EventEmitter);
    private trackConnection;
    private getExternalConnection;
    createExternalOffer(options?: OfferOptions): Promise<MockRTCExternalOfferParams>;
    answerExternalOffer(offer: RTCSessionDescriptionInit, options?: AnswerOptions): Promise<MockRTCExternalAnswerParams>;
    private createConnection;
    createOffer(options?: OfferOptions): Promise<MockRTCOfferParams>;
    answerOffer(offer: RTCSessionDescriptionInit, options?: AnswerOptions): Promise<MockRTCAnswerParams>;
    getSession(id: string): MockRTCSession;
    private handleConnection;
    close(): Promise<void>;
    private messages;
    getAllMessages(): Promise<(string | Buffer)[]>;
    getMessagesOnChannel(channelName: string): Promise<(string | Buffer)[]>;
}
