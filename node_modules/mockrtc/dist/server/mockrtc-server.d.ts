import { MockRTC, MockRTCEvent, MockRTCOptions } from "../mockrtc";
import { MockRTCBase } from "../mockrtc-base";
import { MockRTCServerPeer } from "./mockrtc-server-peer";
import { MockRTCPeer } from "../mockrtc-peer";
import type { MatcherDefinition } from "../matching/matcher-definitions";
import type { HandlerStepDefinition } from "../handling/handler-step-definitions";
export declare class MockRTCServer extends MockRTCBase implements MockRTC {
    private options;
    private debug;
    constructor(options?: MockRTCOptions);
    private eventEmitter;
    start(): Promise<void>;
    stop(): Promise<void>;
    reset(): Promise<void>;
    private _activePeers;
    get activePeers(): Readonly<MockRTCServerPeer[]>;
    getPeer(id: string): MockRTCServerPeer;
    on(event: MockRTCEvent, callback: (...args: any) => void): Promise<void>;
    private matchingPeer;
    getMatchingPeer(): MockRTCPeer;
    private rules;
    setRulesFromDefinitions(rules: Array<{
        matchers: MatcherDefinition[];
        steps: HandlerStepDefinition[];
    }>): Promise<void>;
    addRuleFromDefinition(matcherDefinitions: MatcherDefinition[], handlerStepDefinitions: HandlerStepDefinition[]): Promise<void>;
    private matchConnection;
    buildPeerFromDefinition(handlerStepDefinitions: HandlerStepDefinition[]): Promise<MockRTCServerPeer>;
}
