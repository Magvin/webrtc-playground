/// <reference types="node" />
import { EventEmitter } from 'events';
import * as SDP from 'sdp-transform';
import * as NodeDataChannel from 'node-datachannel';
import type { MockRTCSessionDescription } from '../mockrtc';
import { ConnectionMetadata, MockRTCSession } from '../mockrtc-peer';
import { DataChannelStream } from './datachannel-stream';
import { MediaTrackStream } from './mediatrack-stream';
export declare type ParsedSDP = {
    parsedSdp: SDP.SessionDescription;
};
/**
 * An RTC connection is a single connection. This base class defines the raw connection management and
 * tracking logic for a generic connection. The MockRTCConnection subclass extends this and adds
 * logic to support control channels, proxying and other MockRTC-specific additions.
 */
export declare class RTCConnection extends EventEmitter {
    readonly id: string;
    private rawConn;
    private remoteDescription;
    private localDescription;
    private _connectionMetadata;
    get metadata(): ConnectionMetadata;
    private readonly trackedChannels;
    get channels(): ReadonlyArray<DataChannelStream>;
    get localChannels(): ReadonlyArray<DataChannelStream>;
    get remoteChannels(): ReadonlyArray<DataChannelStream>;
    private readonly trackedMediaTracks;
    get mediaTracks(): ReadonlyArray<MediaTrackStream>;
    get localMediaTracks(): ReadonlyArray<MediaTrackStream>;
    get remoteMediaTracks(): ReadonlyArray<MediaTrackStream>;
    constructor();
    createDataChannel(label: string): DataChannelStream;
    protected trackNewChannel(channel: NodeDataChannel.DataChannel, options: {
        isLocal: boolean;
    }): DataChannelStream;
    protected trackNewMediaTrack(track: NodeDataChannel.Track, options: {
        isLocal: boolean;
    }): MediaTrackStream;
    setRemoteDescription(description: RTCSessionDescriptionInit): void;
    /**
     * Gets the local description for this connection, waiting until gathering is complete to provide a
     * full result. Because this waits for gathering, it will not resolve if no DataChannel, other
     * tracks or remote description have been provided beforehand.
     */
    buildLocalDescription(): Promise<MockRTCSessionDescription>;
    getRemoteDescription(): (RTCSessionDescriptionInit & ParsedSDP) | undefined;
    getLocalDescription(): (MockRTCSessionDescription & ParsedSDP) | undefined;
    getSelectedCandidates(): {
        local: {
            type: RTCIceCandidateType;
            protocol: string;
            address: string;
            port: number;
            candidate: string;
            priority: number;
            mid: string;
        };
        remote: {
            type: RTCIceCandidateType;
            protocol: string;
            address: string;
            port: number;
            candidate: string;
            priority: number;
            mid: string;
        };
    } | undefined;
    getMirroredLocalOffer(sdpToMirror: string, options?: {
        addDataStream?: boolean;
    }): Promise<MockRTCSessionDescription>;
    getMirroredLocalAnswer(sdpToMirror: string): Promise<MockRTCSessionDescription>;
    waitUntilConnected(): Promise<void>;
    readonly sessionApi: MockRTCSession;
    close(): Promise<void>;
}
